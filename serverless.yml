service: kds-sample

frameworkVersion: '3'

provider:
  name: aws
  runtime: nodejs12.x

  # stage: dev
  region: ap-northeast-1

  websocketsApiName: tweets-np-stream

  iam:
    role:
      statements:
        - Effect: "Allow"
          Action:
            - kinesis:GetRecords 
            - kinesis:GetShardIterator 
            - kinesis:DescribeStream 
            - kinesis:ListStreams 
            - kinesis:PutRecord 
            - kinesis:PutRecords
          Resource: 
            - !GetAtt WorkStream.Arn
        - Effect: "Allow"
          Action:
            - "comprehend:*"
          Resource:
            - "*"
        - Effect: "Allow"
          Action:
            - dynamodb:*
          Resource:
            - !GetAtt ConnectionTable.Arn

  environment:
    DATAFILE: "scsk_tweets.json"
    # WORKSTREAM_ARN: !GetAtt WorkStream.Arn
    WORKSTREAM_NAME: ${self:custom.streamName}
    WEBSOCKET_ENDPOINT:
      Fn::Join:
        - ""
        - - "wss://"
          - !Ref WebsocketsApi
          - ".execute-api."
          - ${aws:region}
          - ".amazonaws.com/"
          - ${sls:stage}
    CONNECTION_TABLE_NAME: !Ref ConnectionTable

custom:
  # 重要!!! 一意の名前をつけてください !!!
  suffix: "mk"
  webSiteName: kinesis-sample-tweet-pn-${self:custom.suffix}
  webSiteOrigin:
    Fn::Join:
      - ""
      - - "http://"
        - ${self:custom.webSiteName}-${sls:stage}
        - ".s3-website-"
        - ${aws:region}
        - ".amazonaws.com"
  streamName: workstream
  webSiteBucketName: ${self:custom.webSiteName}-${sls:stage}
  s3Sync:
    - bucketName: ${self:custom.webSiteBucketName}
      localDir: static

package:
  patterns:
    - '!static/**' # 静的リソースはデプロイパッケージに含めない

functions:
  producer:
    handler: producer.publish
    timeout: 900
  subscriber:
    handler: subscriber.subscribe
    timeout: 60
    events:
      - stream:
          type: kinesis
          arn: !GetAtt WorkStream.Arn
          batchSize: 20
          maximumRetryAttempts: 3
          consumer: true
  connect:
    handler: subscriber.connect
    events:
      - websocket:
          route: $connect
  disconnect:
    handler: subscriber.disconnect
    events:
      - websocket:
          route: $disconnect

#    Define function environment variables here
#    environment:
#      variable2: value2

# you can add CloudFormation resource templates here
resources:
  Resources:
    # Kinesis Stream
    WorkStream:    
      Type: AWS::Kinesis::Stream
      Properties: 
        Name: ${self:custom.streamName}
        StreamModeDetails:
          StreamMode: ON_DEMAND

    # Websocket コネクションID保存
    ConnectionTable:
      Type: AWS::DynamoDB::Table
      Properties:
        TableName: connections
        AttributeDefinitions:
          - AttributeName: connectionId
            AttributeType: S
        KeySchema:
          - AttributeName: connectionId
            KeyType: HASH
        ProvisionedThroughput:
          ReadCapacityUnits: 1
          WriteCapacityUnits: 1
        TimeToLiveSpecification:
          AttributeName: ttl
          Enabled: true
        

    # ウェブサイト用バケット
    WebSiteBucket:
      Type: AWS::S3::Bucket
      Properties:
        BucketName: ${self:custom.webSiteBucketName}
        AccessControl: PublicRead
        WebsiteConfiguration:
          IndexDocument: index.html
    
    # 静的ウェブサイトホスティング用バケットポリシー
    StaticSiteS3BucketPolicy:
      Type: AWS::S3::BucketPolicy
      Properties:
        Bucket: !Ref WebSiteBucket
        PolicyDocument:
          Statement:
            - Sid: PublicReadGetObject
              Effect: Allow
              Principal: "*"
              Action:
                - s3:GetObject
              Resource:
                Fn::Join:
                  - ""
                  - - "arn:aws:s3:::"
                    - !Ref WebSiteBucket
                    - "/*"
  Outputs:
    StaticWebSiteUrl:
      Description: "静的ウェブサイトホスティングのURL"
      Value: ${self:custom.webSiteOrigin}

plugins:
  - serverless-s3-sync
